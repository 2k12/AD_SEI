basePath: /api
definitions:
  controllers.CreateRoleInput:
    properties:
      active:
        example: true
        type: boolean
      description:
        example: Rol con permisos de administración
        type: string
      event:
        example: INSERT
        type: string
      name:
        example: Administrador
        type: string
    required:
    - event
    - name
    type: object
  controllers.CreateRoleResponse:
    properties:
      message:
        example: Rol creado exitosamente
        type: string
    type: object
  controllers.ErrorResponse:
    properties:
      error:
        example: Credenciales inválidas
        type: string
    type: object
  controllers.ErrorResponseAudit:
    properties:
      error:
        example: Error al realizar el registro
        type: string
    type: object
  controllers.ErrorResponseGetRoles:
    properties:
      error:
        example: Error al obtener los roles
        type: string
    type: object
  controllers.ErrorResponseRole:
    properties:
      error:
        example: Error al crear el rol
        type: string
    type: object
  controllers.ErrorResponseUpdateRole:
    properties:
      error:
        example: Error al actualizar el rol
        type: string
    type: object
  controllers.ErrorResponseUpdateRoleState:
    properties:
      error:
        example: Error al actualizar el estado del rol
        type: string
    type: object
  controllers.GetRolesResponse:
    properties:
      page:
        example: 1
        type: integer
      pageSize:
        example: 10
        type: integer
      roles:
        items:
          $ref: '#/definitions/controllers.Role'
        type: array
      total:
        example: 15
        type: integer
      totalPages:
        example: 2
        type: integer
    type: object
  controllers.LoginData:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: securePassword123
        type: string
    type: object
  controllers.RegisterAuditInput:
    properties:
      date:
        example: "2024-12-14T15:04:05Z"
        type: string
      description:
        example: Se creó un nuevo usuario con el email user@example.com.
        type: string
      event:
        example: INSERT
        type: string
      origin_service:
        example: INVENTARIO
        type: string
      user_id:
        example: "123"
        type: string
    required:
    - date
    - description
    - event
    - origin_service
    - user_id
    type: object
  controllers.RegisterAuditResponse:
    properties:
      message:
        example: Auditoría registrada exitosamente
        type: string
    type: object
  controllers.Role:
    properties:
      active:
        example: true
        type: boolean
      description:
        example: Gestión de usuarios
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Administrador
        type: string
    type: object
  controllers.TokenResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  controllers.UpdateRoleInput:
    properties:
      active:
        example: true
        type: boolean
      description:
        example: Rol para gestionar usuarios y permisos
        type: string
      name:
        example: Administrador
        type: string
    required:
    - name
    type: object
  controllers.UpdateRoleResponse:
    properties:
      active:
        example: true
        type: boolean
      description:
        example: Rol para gestionar usuarios y permisos
        type: string
      name:
        example: Administrador
        type: string
      role_id:
        example: 1
        type: integer
      status:
        example: updated
        type: string
    type: object
  controllers.UpdateRoleStateInput:
    properties:
      active:
        example: true
        type: boolean
    type: object
  controllers.UpdateRoleStateResponse:
    properties:
      message:
        example: Estado del rol actualizado exitosamente
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: jfpastillod@utn.edu.ec
    name: Pastillo D Joan
    url: https://www.utn.edu.ec
  description: Esta es la documentación de LA API DE SEGURIDAD hecha con Go.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: API SEGURIDAD con Swagger
  version: "1.0"
paths:
  /audit:
    post:
      consumes:
      - application/json
      description: Registra un evento de auditoría en el sistema
      parameters:
      - description: Datos de auditoría a registrar
        in: body
        name: auditData
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterAuditInput'
      produces:
      - application/json
      responses:
        "200":
          description: Auditoría registrada exitosamente
          schema:
            $ref: '#/definitions/controllers.RegisterAuditResponse'
        "400":
          description: Datos inválidos o formato incorrecto
          schema:
            $ref: '#/definitions/controllers.ErrorResponseAudit'
        "500":
          description: Error al registrar la auditoría
          schema:
            $ref: '#/definitions/controllers.ErrorResponseAudit'
      summary: Registrar auditoría
      tags:
      - Auditoría
  /login:
    post:
      consumes:
      - application/json
      description: Autentica un usuario con email y contraseña, devolviendo un token
        JWT
      parameters:
      - description: Datos de inicio de sesión (email y password)
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "400":
          description: Datos inválidos
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
        "401":
          description: Credenciales inválidas
          schema:
            $ref: '#/definitions/controllers.ErrorResponse'
      summary: Iniciar sesión
      tags:
      - Autenticación
  /logout:
    post:
      description: Invalida la sesión actual del usuario. Requiere un Bearer Token.
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Cerrar sesión
      tags:
      - Autenticación
  /roles:
    get:
      consumes:
      - application/json
      description: Devuelve una lista paginada de roles, permitiendo filtrar por nombre
        y estado activo. Los resultados pueden ser paginados utilizando los parámetros
        `page` y `pageSize`.
      parameters:
      - description: Número de página (por defecto 1)
        in: query
        name: page
        type: integer
      - description: Tamaño de página (por defecto 10)
        in: query
        name: pageSize
        type: integer
      - description: Filtrar por nombre del rol
        in: query
        name: name
        type: string
      - description: Filtrar por estado activo (true/false)
        in: query
        name: active
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Roles obtenidos exitosamente
          schema:
            $ref: '#/definitions/controllers.GetRolesResponse'
        "400":
          description: Datos inválidos o formato incorrecto
          schema:
            $ref: '#/definitions/controllers.ErrorResponseGetRoles'
        "401":
          description: No autorizado, se requiere autenticación
          schema:
            $ref: '#/definitions/controllers.ErrorResponseGetRoles'
        "500":
          description: Error interno del servidor al intentar obtener los roles
          schema:
            $ref: '#/definitions/controllers.ErrorResponseGetRoles'
      security:
      - BearerAuth: []
      summary: Obtener roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Crea un nuevo rol con nombre, descripción y estado activo. Requiere
        un Bearer Token.
      parameters:
      - description: Datos del rol
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateRoleInput'
      produces:
      - application/json
      responses:
        "200":
          description: Rol registrado exitosamente
          schema:
            $ref: '#/definitions/controllers.CreateRoleResponse'
        "400":
          description: Datos inválidos o formato incorrecto
          schema:
            $ref: '#/definitions/controllers.ErrorResponseRole'
        "500":
          description: Error al registrar el Rol
          schema:
            $ref: '#/definitions/controllers.ErrorResponseRole'
      security:
      - BearerAuth: []
      summary: Crear rol
      tags:
      - Roles
  /roles/{id}:
    put:
      consumes:
      - application/json
      description: Permite actualizar los datos de un rol existente, como el nombre,
        descripción y estado activo. Se requiere un Bearer Token para la autenticación.
      parameters:
      - description: ID del rol a actualizar
        in: path
        name: id
        required: true
        type: integer
      - description: Estructura que contiene los datos actualizados del rol
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateRoleInput'
      produces:
      - application/json
      responses:
        "200":
          description: Rol actualizado exitosamente
          schema:
            $ref: '#/definitions/controllers.UpdateRoleResponse'
        "400":
          description: Datos inválidos o formato incorrecto
          schema:
            $ref: '#/definitions/controllers.ErrorResponseUpdateRole'
        "401":
          description: No autorizado, falta el token de autenticación
          schema:
            $ref: '#/definitions/controllers.ErrorResponseUpdateRole'
        "404":
          description: Rol no encontrado
          schema:
            $ref: '#/definitions/controllers.ErrorResponseUpdateRole'
        "500":
          description: Error interno del servidor al intentar actualizar el rol
          schema:
            $ref: '#/definitions/controllers.ErrorResponseUpdateRole'
      security:
      - BearerAuth: []
      summary: Actualizar rol
      tags:
      - Roles
  /roles/{id}/state:
    patch:
      consumes:
      - application/json
      description: Actualiza el estado de un rol existente (activo/inactivo)
      parameters:
      - description: ID del rol a actualizar
        in: path
        name: id
        required: true
        type: integer
      - description: Estado del rol a actualizar
        in: body
        name: roleState
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateRoleStateInput'
      produces:
      - application/json
      responses:
        "200":
          description: Estado del rol actualizado exitosamente
          schema:
            $ref: '#/definitions/controllers.UpdateRoleStateResponse'
        "400":
          description: Datos inválidos o ID incorrecto
          schema:
            $ref: '#/definitions/controllers.ErrorResponseUpdateRoleState'
        "401":
          description: No se pudo obtener el ID del usuario desde el contexto
          schema:
            $ref: '#/definitions/controllers.ErrorResponseUpdateRoleState'
        "500":
          description: Error interno al actualizar el estado del rol o registrar la
            auditoría
          schema:
            $ref: '#/definitions/controllers.ErrorResponseUpdateRoleState'
      summary: Actualizar estado del rol
      tags:
      - Roles
  /users:
    post:
      consumes:
      - application/json
      description: Crea un nuevo usuario con nombre, email, contraseña y estado activo.
        Requiere un Bearer Token.
      parameters:
      - description: Datos del usuario
        in: body
        name: input
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: user
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Crear usuario
      tags:
      - Usuarios
  /users/{id}:
    delete:
      description: Cambia el estado de un usuario a inactivo. Requiere un Bearer Token.
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Eliminar usuario
      tags:
      - Usuarios
    put:
      consumes:
      - application/json
      description: Actualiza los datos de un usuario existente. Requiere un Bearer
        Token.
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: string
      - description: Datos a actualizar
        in: body
        name: userData
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: updatedUser
          schema:
            additionalProperties: true
            type: object
        "400":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Actualizar usuario
      tags:
      - Usuarios
  /users/{id}/permissions:
    get:
      description: Devuelve la lista de permisos asignados a un usuario específico,
        dado su ID. Requiere un Bearer Token.
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: permissions
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
        "400":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Obtener permisos de un usuario
      tags:
      - Usuarios
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
